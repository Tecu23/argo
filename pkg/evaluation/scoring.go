// Package evaluation is responsible with evaluating the current board position
package evaluation

import "github.com/Tecu23/argov2/pkg/bitboard"

// Piece value for evaluation
const (
	// for middlegame
	pawnBonusMG   = 124
	knightBonusMG = 781
	bishopBonusMG = 825
	rookBonusMG   = 1276
	queenBonusMG  = 2538

	// for endgame
	pawnBonusEG   = 206
	knightBonusEG = 854
	bishopBonusEG = 915
	rookBonusEG   = 1380
	queenBonusEG  = 2682
)

// Piece square table bonuses
// [MG or EG][Attacking Piece][Row][Attacked Piece]
var psqtBonus = [2][5][8][4]int{
	{
		{
			{-175, -92, -74, -73},
			{-77, -41, -27, -15},
			{-61, -17, 6, 12},
			{-35, 8, 40, 49},
			{-34, 13, 44, 51},
			{-9, 22, 58, 53},
			{-67, -27, 4, 37},
			{-201, -83, -56, -26},
		},
		{
			{-53, -5, -8, -23},
			{-15, 8, 19, 4},
			{-7, 21, -5, 17},
			{-5, 11, 25, 39},
			{-12, 29, 22, 31},
			{-16, 6, 1, 11},
			{-17, -14, 5, 0},
			{-48, 1, -14, -23},
		},
		{
			{-31, -20, -14, -5},
			{-21, -13, -8, 6},
			{-25, -11, -1, 3},
			{-13, -5, -4, -6},
			{-27, -15, -4, 3},
			{-22, -2, 6, 12},
			{-2, 12, 16, 18},
			{-17, -19, -1, 9},
		},
		{
			{3, -5, -5, 4},
			{-3, 5, 8, 12},
			{-3, 6, 13, 7},
			{4, 5, 9, 8},
			{0, 14, 12, 5},
			{-4, 10, 6, 8},
			{-5, 6, 10, 8},
			{-2, -2, 1, -2},
		},
		{
			{271, 327, 271, 198},
			{278, 303, 234, 179},
			{195, 258, 169, 120},
			{164, 190, 138, 98},
			{154, 179, 105, 70},
			{123, 145, 81, 31},
			{88, 120, 65, 33},
			{59, 89, 45, -1},
		},
	},
	{
		{
			{-96, -65, -49, -21},
			{-67, -54, -18, 8},
			{-40, -27, -8, 29},
			{-35, -2, 13, 28},
			{-45, -16, 9, 39},
			{-51, -44, -16, 17},
			{-69, -50, -51, 12},
			{-100, -88, -56, -17},
		},
		{
			{-57, -30, -37, -12},
			{-37, -13, -17, 1},
			{-16, -1, -2, 10},
			{-20, -6, 0, 17},
			{-17, -1, -14, 15},
			{-30, 6, 4, 6},
			{-31, -20, -1, 1},
			{-46, -42, -37, -24},
		},
		{
			{-9, -13, -10, -9},
			{-12, -9, -1, -2},
			{6, -8, -2, -6},
			{-6, 1, -9, 7},
			{-5, 8, 7, -6},
			{6, 1, -7, 10},
			{4, 5, 20, -5},
			{18, 0, 19, 13},
		},
		{
			{-69, -57, -47, -26},
			{-55, -31, -22, -4},
			{-39, -18, -9, 3},
			{-23, -3, 13, 24},
			{-29, -6, 9, 21},
			{-38, -18, -12, 1},
			{-50, -27, -24, -8},
			{-75, -52, -43, -36},
		},
		{
			{1, 45, 85, 76},
			{53, 100, 133, 135},
			{88, 130, 169, 175},
			{103, 156, 172, 172},
			{96, 166, 199, 199},
			{92, 172, 184, 191},
			{47, 121, 116, 131},
			{11, 59, 73, 78},
		},
	},
}

// Piece square table bonuses for pawns for each board square
// MiddleGame then Endgame
var psqtPawnBonus = [2][8][8]int{
	{
		{0, 0, 0, 0, 0, 0, 0, 0},
		{3, 3, 10, 19, 16, 19, 7, -5},
		{-9, -15, 11, 15, 32, 22, 5, -22},
		{-4, -23, 6, 20, 40, 17, 4, -8},
		{13, 0, -13, 1, 11, -2, -13, 5},
		{5, -12, -7, 22, -8, -5, -15, -8},
		{-7, 7, -3, -13, 5, -16, 10, -8},
		{0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		{0, 0, 0, 0, 0, 0, 0, 0},
		{-10, -6, 10, 0, 14, 7, -5, -19},
		{-10, -10, -10, 4, 4, 3, -6, -4},
		{6, -2, -8, -4, -13, -12, -10, -9},
		{10, 5, 4, -5, -5, -5, 14, 9},
		{28, 20, 21, 28, 30, 7, 6, 13},
		{0, -11, 12, 21, 25, 19, 4, 7},
		{0, 0, 0, 0, 0, 0, 0, 0},
	},
}

var mobilityBonusValues = [2][4][]int{
	{
		{-62, -53, -12, -4, 3, 13, 22, 28, 33},
		{-48, -20, 16, 26, 38, 51, 55, 63, 63, 68, 81, 81, 91, 98},
		{-60, -20, 2, 3, 3, 11, 22, 31, 40, 40, 41, 48, 57, 57, 62},
		{
			-30, -12, -8, -9, 20, 23, 23, 35, 38, 53, 64, 65, 65, 66, 67,
			67, 72, 72, 77, 79, 93, 108, 108, 108, 110, 114, 114, 116,
		},
	},
	{
		{-81, -56, -31, -16, 5, 11, 17, 20, 25},
		{-59, -23, -3, 13, 24, 42, 54, 57, 65, 73, 78, 86, 88, 97},
		{-78, -17, 23, 39, 70, 99, 103, 121, 134, 139, 158, 164, 168, 169, 172},
		{
			-48, -30, -7, 19, 40, 55, 59, 75, 78, 96, 96, 100, 121,
			127, 131, 133, 136, 141, 147, 150, 151, 168, 168, 171, 182, 182, 192, 219,
		},
	},
}

// KingRingPatterns contains precomputed king ring patterns for all 64 squares
var KingRingPatterns = [64]bitboard.Bitboard{
	0x0000000000070707, // Square a8 (0)
	0x0000000000070707, // Square b8 (1)
	0x00000000000e0e0e, // Square c8 (2)
	0x00000000001c1c1c, // Square d8 (3)
	0x0000000000383838, // Square e8 (4)
	0x0000000000707070, // Square f8 (5)
	0x0000000000e0e0e0, // Square g8 (6)
	0x0000000000e0e0e0, // Square h8 (7)
	0x0000000000070707, // Square a7 (8)
	0x0000000000070707, // Square b7 (9)
	0x00000000000e0e0e, // Square c7 (10)
	0x00000000001c1c1c, // Square d7 (11)
	0x0000000000383838, // Square e7 (12)
	0x0000000000707070, // Square f7 (13)
	0x0000000000e0e0e0, // Square g7 (14)
	0x0000000000e0e0e0, // Square h7 (15)
	0x0000000007070700, // Square a6 (16)
	0x0000000007070700, // Square b6 (17)
	0x000000000e0e0e00, // Square c6 (18)
	0x000000001c1c1c00, // Square d6 (19)
	0x0000000038383800, // Square e6 (20)
	0x0000000070707000, // Square f6 (21)
	0x00000000e0e0e000, // Square g6 (22)
	0x00000000e0e0e000, // Square h6 (23)
	0x0000000707070000, // Square a5 (24)
	0x0000000707070000, // Square b5 (25)
	0x0000000e0e0e0000, // Square c5 (26)
	0x0000001c1c1c0000, // Square d5 (27)
	0x0000003838380000, // Square e5 (28)
	0x0000007070700000, // Square f5 (29)
	0x000000e0e0e00000, // Square g5 (30)
	0x000000e0e0e00000, // Square h5 (31)
	0x0000070707000000, // Square a4 (32)
	0x0000070707000000, // Square b4 (33)
	0x00000e0e0e000000, // Square c4 (34)
	0x00001c1c1c000000, // Square d4 (35)
	0x0000383838000000, // Square e4 (36)
	0x0000707070000000, // Square f4 (37)
	0x0000e0e0e0000000, // Square g4 (38)
	0x0000e0e0e0000000, // Square h4 (39)
	0x0007070700000000, // Square a3 (40)
	0x0007070700000000, // Square b3 (41)
	0x000e0e0e00000000, // Square c3 (42)
	0x001c1c1c00000000, // Square d3 (43)
	0x0038383800000000, // Square e3 (44)
	0x0070707000000000, // Square f3 (45)
	0x00e0e0e000000000, // Square g3 (46)
	0x00e0e0e000000000, // Square h3 (47)
	0x0707070000000000, // Square a2 (48)
	0x0707070000000000, // Square b2 (49)
	0x0e0e0e0000000000, // Square c2 (50)
	0x1c1c1c0000000000, // Square d2 (51)
	0x3838380000000000, // Square e2 (52)
	0x7070700000000000, // Square f2 (53)
	0xe0e0e00000000000, // Square g2 (54)
	0xe0e0e00000000000, // Square h2 (55)
	0x0707070000000000, // Square a1 (56)
	0x0707070000000000, // Square b1 (57)
	0x0e0e0e0000000000, // Square c1 (58)
	0x1c1c1c0000000000, // Square d1 (59)
	0x3838380000000000, // Square e1 (60)
	0x7070700000000000, // Square f1 (61)
	0xe0e0e00000000000, // Square g1 (62)
	0xe0e0e00000000000, // Square h1 (63)
}
